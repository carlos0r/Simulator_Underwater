<launch>
  <!-- Vehicle namespace -->
  <arg name="name"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(arg name)"/>
  <!-- Thruster saturation -->
  <arg name="saturation" default="1200"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
  <!--
    Set this flag to true to compute both reference and error vectors wrt
    world_ned frame
  -->
  <arg name="max_forward_speed" default="2.5"/>
  <arg name="dubins_radius" default="10"/>
  <arg name="min_thrust" default="0"/>
  <arg name="max_thrust" default="120"/>
  <arg name="thrust_p_gain" default="5.0"/>
  <arg name="thrust_d_gain" default="0.01"/>
  <arg name="p_roll" default="0.2"/>
  <arg name="p_pitch" default="0.8"/>
  <arg name="d_pitch" default="0.0"/>
  <arg name="p_yaw" default="0.8"/>
  <arg name="d_yaw" default="0.0"/>
  <arg name="idle_radius" default="30"/>
  <arg name="look_ahead_delay" default="0.0"/>
  <arg name="dubins_max_pitch" default="0.26"/>
  <arg name="desired_pitch_limit" default="0.26"/>
  <arg name="yaw_error_limit" default="1.57"/>
  <arg name="use_ned_frame" default="false"/>
  <arg name="stamped_pose_only" default="false"/>
  <arg name="timeout_idle_mode" default="5"/>

  <!-- If the file is not used, read the parameters from the user input -->
  <!-- Caution: no spaces between the parameter values -->
  <!-- The following controller parameters have been optimized for the RexROV
       vehicle using SMAC (https://github.com/automl/SMAC3)
  -->
  <arg name="Kp" default="11993.888,11993.888,11993.888,19460.069,19460.069,19460.069"/>
  <arg name="Kd" default="9077.459,9077.459,9077.459,18880.925,18880.925,18880.925"/>
  <arg name="Ki" default="321.417,321.417,321.417,2096.951,2096.951,2096.951"/>

  <arg name="controller_config_file" default="$(find trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml"/>

  <!--Thruster manager configuration  -->
  <arg name="thruster_manager_output_dir" default="$(find thruster_manager)/config/$(arg model_name)"/>
  <arg name="thruster_manager_config_file" default="$(find thruster_manager)/config/$(arg model_name)/thruster_manager.yaml"/>
  <!-- File containing the thruster allocation matrix -->
  <arg name="tam_file" default="$(find thruster_manager)/config/$(arg model_name)/TAM.yaml"/>

  <!-- Start the thruster allocation manager -->
  <include file="$(find thruster_manager)/launch/thruster_manager.launch">
     <arg name="name" value="$(arg name)" />
     <arg name="model_name" value="$(arg model_name)" />
     <arg name="output_dir" value="$(arg thruster_manager_output_dir)" />
     <arg name="config_file" value="$(arg thruster_manager_config_file)" />
     <arg name="tam_file" value="$(arg tam_file)" />
     <remap from="" to=""/>
   </include>

  
       visualization markers for RViz -->
  <group if="$(arg gui_on)">
    <group ns="$(arg name)">
      <node pkg="utils"
            type="trajectory_marker_publisher.py"
            name="trajectory_marker_publisher"
            output="screen">
         <remap from="trajectory" to="dp_controller/trajectory"/>
         <remap from="waypoints" to="dp_controller/waypoints"/>
         <remap from="reference" to="dp_controller/reference"/>
      </node>
    </group>
  </group>

  <group if="$(arg use_params_file)">
    <group ns="$(arg name)">
      <node pkg="trajectory_control"
            type="rov_pid_controller.py"
            name="rov_pid_controller"
            output="screen"
            if="$(arg use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt_ned"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <rosparam file="$(arg controller_config_file)" command="load"/>
        <rosparam subst_value="true">
          inertial_frame_id: world_ned
        </rosparam>
      </node>

      <node pkg="trajectory_control"
            type="rov_pid_controller.py"
            name="rov_pid_controller"
            output="screen"
            unless="$(arg use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <rosparam file="$(arg controller_config_file)" command="load"/>
        <rosparam subst_value="true">
          inertial_frame_id: world
        </rosparam>
      </node>

      <node pkg="trajectory_control"
          type="auv_geometric_tracking_controller_bluerov2_2.py"
          name="auv_geometric_tracking_controller_bluerov2_2"
          output="screen"
          unless="$(arg use_ned_frame)">
      <remap from="odom" to="pose_gt"/>
      <remap from="trajectory" to="dp_controller/trajectory"/>
      <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
      <remap from="waypoints" to="dp_controller/waypoints"/>
      <remap from="reference" to="dp_controller/reference"/>
      <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      <remap from="auv_command_output" to="control_allocation/control_input"/>
      <rosparam subst_value="true">
          timeout_idle_mode: $(arg timeout_idle_mode)
          max_forward_speed: $(arg max_forward_speed)
          base_link: base_link
          is_underactuated: true
          stamped_pose_only: $(arg stamped_pose_only)
          inertial_frame_id: world
          min_thrust: $(arg min_thrust)
          max_thrust: $(arg max_thrust)
          thruster_topic_0: $(arg thruster_topic_0)
          thruster_topic_1: $(arg thruster_topic_1)
          thruster_topic_2: $(arg thruster_topic_2)
          thruster_topic_3: $(arg thruster_topic_3)
          thruster_topic_4: $(arg thruster_topic_4)
          thruster_topic_5: $(arg thruster_topic_5)
          thrust_p_gain: $(arg thrust_p_gain)
          thrust_d_gain: $(arg thrust_d_gain)
          idle_radius: $(arg idle_radius)
          p_roll: $(arg p_roll)
          p_pitch: $(arg p_pitch)
          d_pitch: $(arg d_pitch)
          p_yaw: $(arg p_yaw)
          d_yaw: $(arg d_yaw)
          look_ahead_delay: $(arg look_ahead_delay)
          desired_pitch_limit: $(arg desired_pitch_limit)
          yaw_error_limit: $(arg yaw_error_limit)
          dubins:
              radius: $(arg dubins_radius)
              max_pitch: $(arg dubins_max_pitch)
          lipb:
              radius: $(arg dubins_radius)
          thruster_config:
              topic_prefix: $(arg thruster_topic_prefix)
              topic_suffix: $(arg thruster_topic_suffix)
              frame_base: $(arg thruster_frame_base)
              max_thrust: $(arg max_thrust)
              conversion_fcn: $(arg thruster_conversion_fcn)
              conversion_fcn_params:
                  gain: $(arg thruster_gain)
      </rosparam>
      </node>
    </group>
  </group>

  <group unless="$(arg use_params_file)">
    <group ns="$(arg name)">
      <node pkg="trajectory_control"
            type="rov_pid_controller.py"
            name="rov_pid_controller"
            output="screen"
            if="$(arg use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt_ned"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <!-- Controller parameters -->
        <rosparam subst_value="true">
          saturation: $(arg saturation)
          Kp: [$(arg Kp)]
          Kd: [$(arg Kd)]
          Ki: [$(arg Ki)]
          inertial_frame_id: world_ned
        </rosparam>
      </node>

      <node pkg="trajectory_control"
            type="rov_pid_controller.py"
            name="rov_pid_controller"
            output="screen"
            unless="$(arg use_ned_frame)">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <!-- Controller parameters -->
        <rosparam subst_value="true">
          saturation: $(arg saturation)
          Kp: [$(arg Kp)]
          Kd: [$(arg Kd)]
          Ki: [$(arg Ki)]
          inertial_frame_id: world
        </rosparam>
      </node>

      <node pkg="trajectory_control"
          type="auv_geometric_tracking_controller_bluerov2_2.py"
          name="auv_geometric_tracking_controller_bluerov2_2"
          output="screen"
          if="$(arg use_ned_frame)">
      <remap from="odom" to="pose_gt_ned"/>
      <remap from="trajectory" to="dp_controller/trajectory"/>
      <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
      <remap from="waypoints" to="dp_controller/waypoints"/>
      <remap from="reference" to="dp_controller/reference"/>
      <remap from="thruster_output" to="thruster_manager/input_stamped"/>
      <remap from="auv_command_output" to="control_allocation/control_input"/>
      <rosparam subst_value="true">
          timeout_idle_mode: $(arg timeout_idle_mode)
          max_forward_speed: $(arg max_forward_speed)
          base_link: base_link_ned
          is_underactuated: true
          stamped_pose_only: $(arg stamped_pose_only)
          inertial_frame_id: world_ned
          min_thrust: $(arg min_thrust)
          max_thrust: $(arg max_thrust)
          thruster_topic_0: $(arg thruster_topic_0)
          thruster_topic_1: $(arg thruster_topic_1)
          thruster_topic_2: $(arg thruster_topic_2)
          thruster_topic_3: $(arg thruster_topic_3)
          thruster_topic_4: $(arg thruster_topic_4)
          thruster_topic_5: $(arg thruster_topic_5)
          thrust_p_gain: $(arg thrust_p_gain)
          thrust_d_gain: $(arg thrust_d_gain)
          idle_radius: $(arg idle_radius)
          p_roll: $(arg p_roll)
          p_pitch: $(arg p_pitch)
          d_pitch: $(arg d_pitch)
          p_yaw: $(arg p_yaw)
          d_yaw: $(arg d_yaw)
          look_ahead_delay: $(arg look_ahead_delay)
          desired_pitch_limit: $(arg desired_pitch_limit)
          yaw_error_limit: $(arg yaw_error_limit)
          dubins:
              radius: $(arg dubins_radius)
              max_pitch: $(arg dubins_max_pitch)
          lipb:
              radius: 20
          thruster_config:
              topic_prefix: $(arg thruster_topic_prefix)
              topic_suffix: $(arg thruster_topic_suffix)
              frame_base: $(arg thruster_frame_base)
              max_thrust: $(arg max_thrust)
              conversion_fcn: $(arg thruster_conversion_fcn)
              conversion_fcn_params:
                  gain: $(arg thruster_gain)
      </rosparam>
      </node>
    </group>
  </group>

</launch>
